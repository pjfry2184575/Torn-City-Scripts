// ==UserScript==
// @name         Torn Faction Activity
// @namespace    TornExtensions
// @version      1.3
// @description  Highlights inactive faction members with inactive time and color coded.
// @colorCodes 1d-3d = Yellow, 4d-6d = Orange, 7d-13d = Red, 14+d = Purple 
// @owner        Phillip_J_Fry [2184575]
// @match        https://www.torn.com/factions.php?step=your
// @grant        none
// ==/UserScript==
 
(async function() {
  'use strict';
  const SECONDS_IN_HOUR = 3600;
  const SECONDS_IN_DAY = 86400;
  const SECONDS_IN_THREE_DAYS = SECONDS_IN_DAY * 3; // Unused???
  const SECONDS_IN_SEVEN_DAYS = SECONDS_IN_DAY * 7; // Unused???
  const MIN_DAY_COLOR_LOOKUP = {
    14:'#808',
    7:'#f00',
    4:'#f70',
    1:'#ff0',
  }, MIN_DAY_KEYS = Object.keys(MIN_DAY_COLOR_LOOKUP).map(e=>parseInt(e)).sort().reverse();
 
  function sendRequest(httpAction, url) {
    const promise = new Promise((success, failure) => {
      const req = new XMLHttpRequest();
      req.responseType = 'json';
      req.open(httpAction, url);
      req.onload = () => {
        req.status === 200 ?
          success(req.response) : failure(req.response);
      }
      req.send();
    });
    return promise;
  }
 
  async function getCurrentTornTime(apiKey) {
    return sendRequest('GET', `https://api.torn.com/torn/?selections=timestamp&key=${apiKey}`)
    .then(response => {
       if (!response.timestamp) {
         throw `Could not get current torn time: ${JSON.stringify(response)}`;
       }
       return response.timestamp;
    });
  }
 
  async function getFactionActivity(apiKey, tornTime) {
     return sendRequest('GET',`https://api.torn.com/faction/?selections=&key=${apiKey}`)
    .then(response => {
       if (!response.members) {
         throw `Could not get faction information: ${JSON.stringify(response)}`;
       }
       const members = [];
       for (const [key, value] of Object.entries(response.members)) {
         // Technically we can just use the "relative" field, but it feels less brittle
         // to compare by timestamp, and more straightforward to parse timestamps v.s. parsing a string.
         members.push({name: value.name, secondsSinceActivity: tornTime - value.last_action.timestamp})
       }
       return members;
     })
  }
 
  function waitForSelector(selector) {
    return new Promise(resolve => {
      if ($(selector).length) {
        return resolve($(selector));
      }
 
      const observer = new MutationObserver(mutations => {
        if ($(selector).length) {
          resolve($(selector));
          observer.disconnect();
        }
      });
 
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
    });
  }
 
  function createInactivityString(secondsElapsed) {
    const days = Math.floor(secondsElapsed / SECONDS_IN_DAY)
    const hours = Math.floor((secondsElapsed - (days * SECONDS_IN_DAY)) / SECONDS_IN_HOUR)
    return `${days}d ${hours}h`
  }
 
  function setAsInactive(selector, color, member) {
     selector.css('background-color', color).css('opacity', 0.5);
     let memberSelector = $(`.tfa-${member.name}`)
     if (!memberSelector.length) {
      $(`<span class="tfa-${member.name}" style="color:white; position:relative; font-weight:bold">Inactive: ${createInactivityString(member.secondsSinceActivity)}</span>`).insertAfter(selector);
      selector.parent().closest('div').css('text-align', 'center');
     }
     else {
     memberSelector.text(`Inactive: ${createInactivityString(member.secondsSinceActivity)}`);
    }
  }
 
  async function renderActivityColors(factionData) {
    factionData.forEach(async (member) => {
      let selector = await waitForSelector(`span:contains(${member.name})`);
      for (const min_days of MIN_DAY_KEYS)
        if (member.secondsSinceActivity >= min_days * SECONDS_IN_DAY) {
          setAsInactive(selector, MIN_DAY_COLOR_LOOKUP[min_days], member);
          break;
        }
    });
  }
 
  const API_KEY = '###PDA-APIKEY###';
  const tornTime =  await getCurrentTornTime(API_KEY);
  const factionData = await getFactionActivity(API_KEY, tornTime);
  renderActivityColors(factionData);
})();
